{"version":3,"sources":["utils/firstChar.js","pages/Pokedex.js","utils/typeColors.js","pages/Pokemon.js","pages/Regions.js","App.js","serviceWorker.js","index.js"],"names":["toFirstCharUppercase","name","charAt","toUpperCase","slice","useStyles","makeStyles","theme","pokedexContainer","paddingTop","paddingLeft","paddingRight","cardMedia","margin","cardContent","textAlign","pokemonCard","border","borderRadius","pokemonHeader","display","justifyContent","searchContainer","backgroundColor","fade","palette","common","white","padding","Pokedex","props","classes","history","useState","pokemonData","setPokemonData","filter","setFilter","useEffect","axios","get","then","response","console","log","results","data","newPokemonData","forEach","pokemon","index","id","sprite","AppBar","position","Toolbar","className","style","TextField","label","variant","onChange","event","target","value","Typography","Grid","container","spacing","Object","keys","map","pokemonId","includes","item","xs","sm","key","Card","onClick","push","CardMedia","image","width","height","CardContent","getPokemonCard","CircularProgress","alignContent","typeColors","bug","dragon","fairy","fire","ghost","ground","normal","pyschic","steel","dark","electric","fighting","flying","grass","ice","poison","rock","water","Pokemon","match","params","undefined","setPokemon","catch","error","species","weight","types","sprites","location_area_encounters","front_default","front_shiny","src","Link","href","url","typeInfo","type","Button","color","generatePokemon","justifyItems","RegionList","App","exact","path","component","render","Boolean","window","location","hostname","createBrowserHistory","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c5de4e05.chunk.js","sourcesContent":["export const toFirstCharUppercase = name =>\n    name.charAt(0).toUpperCase() + name.slice(1);","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  AppBar,\n  Toolbar,\n  Grid,\n  Card,\n  CardContent,\n  CardMedia,\n  CircularProgress,\n  Typography,\n  TextField,\n} from \"@material-ui/core\";\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\nimport { toFirstCharUppercase } from \"../utils/firstChar\";\nimport './styles.css'\n\nconst useStyles = makeStyles((theme) => ({\n  pokedexContainer: {\n    paddingTop: \"20px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n  cardMedia: {\n    margin: \"auto\",\n  },\n  cardContent: {\n    textAlign: \"center\",\n  },\n  pokemonCard: {\n    border: '.25em solid red',\n    borderRadius: '3em'\n  },\n  pokemonHeader: {\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  searchContainer: {\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    padding: \".5em 1em .5em 1em\",\n    margin: \"5px 0px\",\n  },\n}));\n\nconst Pokedex = (props) => {\n  const classes = useStyles();\n  const { history } = props;\n  const [pokemonData, setPokemonData] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [nextUrl, setNextUrl] = useState('');\n  const [prevUrl, setPrevUrl] = useState('');\n  const [filter, setFilter] = useState('');\n\n  const handleChange = (event) => {\n    setFilter(event.target.value);\n  };\n\n  // const next = async () => {\n  //   setLoading(true);\n  //   let data = await getAllPokemon(nextUrl);\n  //   await loadPokemon(data.results);\n  //   setNextUrl(data.next);\n  //   setPrevUrl(data.previous);\n  //   setLoading(false);\n  // }\n\n  // const prev = async () => {\n  //   if (!prevUrl) return;\n  //   setLoading(true);\n  //   let data = await getAllPokemon(prevUrl);\n  //   await loadPokemon(data.results);\n  //   setNextUrl(data.next);\n  //   setPrevUrl(data.previous);\n  //   setLoading(false);\n  // }\n\n  useEffect(() => {\n    axios\n      .get(`https://pokeapi.co/api/v2/pokemon?limit=807?offset=21`)\n      .then(function (response) {\n        console.log('response', response)\n        const { data } = response;\n        const { results } = data;\n        const newPokemonData = {};\n        results.forEach((pokemon, index) => {\n          newPokemonData[index + 1] = {\n            id: index + 1,\n            name: pokemon.name,\n            sprite: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${\n              index + 1\n            }.png`,\n          };\n        });\n        setPokemonData(newPokemonData);\n      });\n  }, []);\n\n  const getPokemonCard = (pokemonId) => {\n    const { id, name, sprite } = pokemonData[pokemonId];\n\n    return (\n      <Grid item xs={12} sm={4} key={pokemonId}>\n        <Card className={classes.pokemonCard} onClick={() => history.push(`/${id}`)}>\n          <CardMedia\n            className={classes.cardMedia}\n            image={sprite}\n            style={{ width: \"130px\", height: \"130px\" }}\n          />\n          <CardContent className={classes.cardContent}>\n            <Typography>{`${id}. ${toFirstCharUppercase(name)}`}</Typography>{\" \"}\n          </CardContent>\n        </Card>\n      </Grid>\n    );\n  };\n\n  return (\n    <>\n      <AppBar position=\"static\">\n        <Toolbar className={classes.pokemonHeader} style={{ backgroundColor: \"#FF4236\"}}>\n          <div className={classes.searchContainer}>\n            <TextField\n              label=\"Pokemon\"\n              variant=\"standard\"\n              onChange={handleChange}\n            />\n          </div>\n          <div >\n            <Typography >PokemonApp</Typography>\n          </div>\n        </Toolbar>\n      </AppBar>\n      {pokemonData ? (\n        <Grid container spacing={2} className={classes.pokedexContainer}>\n          {Object.keys(pokemonData).map(\n            (pokemonId) =>\n              pokemonData[pokemonId].name.includes(filter) &&\n              getPokemonCard(pokemonId)\n          )}\n        </Grid>\n      ) : (\n        <CircularProgress style={{alignContent: 'center'}}/>\n      )}\n    </>\n  );\n};\n\nexport default Pokedex;\n","const typeColors = {\n    bug: '#729f3f',\n    dragon: '#53a4cf',\n    fairy: '#fdb9e9',\n    fire: '#fd7d24',\n    ghost: '#7b62a3',\n    ground: '#f7de3f',\n    normal: '#a4acaf',\n    pyschic: '#f366b9',\n    steel: '#9eb7b',\n    dark: '#707070',\n    electric: '#eed535',\n    fighting: '#d56723',\n    flying: '#3dc7ef',\n    grass: '#9bcc50',\n    ice: '#51c4e7',\n    poison: '#b97fc9',\n    rock: '#a38c21',\n    water: '#4592c4'\n}\n\nexport default typeColors;","import React, { useEffect, useState } from \"react\";\nimport { Typography, Link, CircularProgress, Button } from \"@material-ui/core\";\nimport { toFirstCharUppercase } from \"../utils/firstChar\";\nimport typeColors from \"../utils/typeColors\";\nimport axios from \"axios\";\nimport \"./styles.css\";\n\nconst Pokemon = (props) => {\n  const { match, history } = props;\n  const { params } = match;\n  const { pokemonId } = params;\n  const [pokemon, setPokemon] = useState(undefined);\n\n  useEffect(() => {\n    axios\n      .get(`https://pokeapi.co/api/v2/pokemon/pokemon-testing/${pokemonId}`)\n      .then(function (response) {\n        const { data } = response;\n        console.log(response);\n        setPokemon(data);\n      })\n      .catch(function (error) {\n        console.log(\"ERROR\", error);\n        setPokemon(false);\n      });\n  }, [pokemonId]);\n\n  const generatePokemon = (pokemon) => {\n    const {\n      name,\n      id,\n      species,\n      height,\n      weight,\n      types,\n      sprites,\n      location_area_encounters,\n    } = pokemon;\n    const { front_default } = sprites;\n    const { front_shiny } = sprites;\n\n    return (\n      <>\n        <Typography variant=\"h3\" className=\"pokemonHeader\">\n          {`${id}.`} {toFirstCharUppercase(name)}\n        </Typography>\n        <div className=\"pokemonImage\">\n          <img style={{ width: \"40em\", height: \"10em\" }} src={front_default} />\n          <img style={{ width: \"40em\", height: \"10em\" }} src={front_shiny} />\n        </div>\n        <div className=\"pokemonInfoDiv\">\n          <Typography variant=\"h3\">Pokemon Info</Typography>\n          <Typography className=\"pokemonUrl\">\n            {\"Species: \"}\n            <Link href={species.url}>\n              {toFirstCharUppercase(species.name)}{\" \"}\n            </Link>\n          </Typography>\n          <Typography>Height: {height} </Typography>\n          <Typography>Weight: {weight} </Typography>\n          <Typography variant=\"h6\"> Types:</Typography>\n          {types.map((typeInfo) => {\n            const { type } = typeInfo;\n            const { name } = type;\n            console.log(\"NameType\", type);\n            return (\n              <Button>\n                <Link\n                  href={type.url}\n                  key={name}\n                  className=\"cardType\"\n                  style={{ backgroundColor: typeColors[type.name], color: 'white' }}\n                >\n                  {toFirstCharUppercase(`${name}`)}\n                </Link>\n              </Button>\n            );\n          })}\n          <h3 style={{ textAlign: \"center\" }}>\n            Locations:{\" \"}\n            <Link\n              href={location_area_encounters}\n            >{`${location_area_encounters}`}</Link>{\" \"}\n          </h3>\n        </div>\n      </>\n    );\n  };\n  return (\n    <>\n      {/* 1. pokemon = undefined, that means we are getting the info\n        -> return loading progress */}\n      {pokemon === undefined && (\n        <CircularProgress style={{ alignContent: \"center\" }} />\n      )}\n      {/* 2. pokemon = good data, that means we've gotten info\n        -> return pokemon info */}\n      {pokemon !== undefined && pokemon && generatePokemon(pokemon)}\n      {/* 3. pokemon = bad data, that means no info has been found\n        -> return pokemon not found */}\n      {pokemon === false && <Typography> Pokemon not found</Typography>}\n\n      {/* 4. Show button for going back to home page. */}\n      {pokemon !== undefined && (\n        <Button\n          style={{\n            backgroundColor: \"#FF4236\",\n            color: \"white\",\n            justifyItems: \"center\",\n          }}\n          variant=\"contained\"\n          onClick={() => history.push(\"/\")}\n        >\n          Back to Pokedex\n        </Button>\n      )}\n    </>\n  );\n};\nexport default Pokemon;\n","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\n\n\nfunction RegionList (props) {\n    const [regionData, setRegionData] = useState('Kanto');\n    const { match, history } = props;\n    const { params } = match;\n    const { regionId } = params;\n  \n    useEffect(() => {\n        axios\n          .get(`https://pokeapi.co/api/v2/generation/${regionId}`)\n          .then(function (response) {\n            console.log('response', response)\n            const { data } = response;\n            const { results } = data\n            console.log('results', results)\n            const newRegionData = {};\n            results.forEach((data, index) => {\n              newRegionData[index] = {\n                id: index,\n                name: data.name,\n              };\n            });\n            setRegionData(newRegionData);\n          });\n      }, [regionId]);\n\n      const getRegion = (regionId) => {\n        const { id, main_region, pokemon_species } = regionData[regionId];\n    \n        // return (\n        //     <>\n        //         {}\n        //     </>\n        // )\n      };\n    \n    \n      return (\n          <>\n\n          </>\n      )\n};\n\nexport default RegionList;","import React from 'react';\nimport Pokedex from './pages/Pokedex';\nimport Pokemon from './pages/Pokemon';\nimport RegionList from './pages/Regions';\nimport { Route, Switch } from 'react-router-dom';\n\nconst App = () => {\n  return (\n    <Switch>\n      <Route exact path='/pokedex-testing' component={Pokedex} />\n      {/* <Route exact path='/regions' component={RegionList} /> */}\n      <Route exact path='/:pokemonId' render={(props) => <Pokemon {...props} />} />\n    </Switch>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router history={history}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}