{"version":3,"sources":["pages/RegionDex.js","utils/firstChar.js","pages/Pokedex.js","utils/typeColors.js","pages/Pokemon.js","pages/Region.js","App.js","serviceWorker.js","index.js"],"names":["RegionDex","props","history","className","style","textAlign","regionJSON","map","region","Grid","container","spacing","item","xs","lg","Card","marginBottom","border","CardContent","region_name","CardMedia","src","image","alt","Link","to","link","color","textDecoration","margin","onClick","push","region_ID","toFirstCharUppercase","name","charAt","toUpperCase","slice","useStyles","makeStyles","theme","pokedexContainer","paddingTop","paddingLeft","paddingRight","marginTop","width","cardMedia","cardContent","pokemonHeader","display","justifyContent","searchContainer","backgroundColor","fade","palette","common","white","padding","rightSideHeader","Pokedex","console","log","classes","useState","pokemonData","setPokemonData","filter","setFilter","useEffect","axios","get","then","response","results","data","newPokemonData","forEach","pokemon","index","id","sprite","AppBar","position","Toolbar","TextField","label","variant","onChange","event","target","value","toLowerCase","Typography","marginLeft","Object","keys","pokemonId","includes","sm","key","height","getPokemonCard","CircularProgress","placeItems","typeColors","bug","dragon","fairy","fire","ghost","ground","normal","pyschic","steel","dark","electric","fighting","flying","grass","ice","poison","rock","water","Pokemon","match","params","undefined","setPokemon","catch","error","alignContent","species","weight","types","sprites","location_area_encounters","front_default","front_shiny","href","url","typeInfo","type","generatePokemon","Button","float","RegionPage","regionData","setRegionData","regionId","pokemonListRaw","pokemon_species","element","parseInt","substring","lastIndexOf","sort","a","b","main_region","getRegionCard","App","exact","path","component","render","Region","Boolean","window","location","hostname","createBrowserHistory","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wnCAsCeA,G,MA3BG,SAACC,GAAW,IACpBC,EAAYD,EAAZC,QAER,OACE,yBAAKC,UAAU,oBACb,wBAAIC,MAAO,CAACC,UAAW,WAAvB,eACCC,EAAWC,KAAI,SAACC,GACf,OACA,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGR,UAAU,kBACpC,kBAACM,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGX,UAAU,8BACjC,kBAACY,EAAA,EAAD,CAAMX,MAAO,CAACY,aAAc,MAAOC,OAAQ,sBACzC,kBAACC,EAAA,EAAD,KACE,wBAAId,MAAO,CAACC,UAAW,WAAYG,EAAOW,cAE5C,kBAACC,EAAA,EAAD,CAAWjB,UAAU,cACnB,yBAAKA,UAAU,eAAekB,IAAKb,EAAOc,MAAOC,IAAKf,EAAOW,cAC7D,kBAACK,EAAA,EAAD,CAAMC,GAAIjB,EAAOkB,KAAMvB,UAAU,gBAAgBC,MAAO,CAACuB,MAAO,QAASC,eAAgB,OAAQC,OAAQ,eAAiBC,QAAS,kBAAM5B,EAAQ6B,KAAR,mCAAyCvB,EAAOwB,cAAzL,sC,8EC3BHC,EAAuB,SAAAC,GAAI,OACpCA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,ICkBxCC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,iBAAkB,CAChBC,WAAY,OACZC,YAAa,OACbC,aAAc,OACdC,UAAW,MACXC,MAAO,QAETC,UAAW,CACTlB,OAAQ,QAEVmB,YAAa,CACX3C,UAAW,UAEb4C,cAAe,CACbC,QAAS,OACTC,eAAgB,iBAElBC,gBAAiB,CACfC,gBAAiBC,YAAKd,EAAMe,QAAQC,OAAOC,MAAO,KAClDC,QAAS,oBACT7B,OAAQ,WAEV8B,gBAAiB,CACfT,QAAS,YAkHEU,EA9GC,SAAC3D,GACf4D,QAAQC,IAAI,QAAS7D,GACrB,IAAM8D,EAAUzB,IACRpC,EAAYD,EAAZC,QAHiB,EAIa8D,mBAAS,IAJtB,mBAIlBC,EAJkB,KAILC,EAJK,OAQGF,mBAAS,IARZ,mBAQlBG,EARkB,KAQVC,EARU,KAkCzBC,qBAAU,WACRC,IACGC,IADH,yDAEGC,MAAK,SAAUC,GAAW,IAEjBC,EADSD,EAATE,KACAD,QACFE,EAAiB,GAEvBF,EAAQG,SAAQ,SAACC,EAASC,GACxBH,EAAeG,EAAQ,GAAK,CAC1BC,GAAID,EAAQ,EACZ7C,KAAM4C,EAAQ5C,KACd+C,OAAO,4EAAD,OACJF,EAAQ,EADJ,YAKVb,EAAeU,QAElB,IAsBH,OACE,oCACE,kBAACM,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,CAASjF,UAAU,gBAAgBC,MAAO,CAAEiD,gBAAiB,UAAW1B,MAAO,YAC7E,yBAAKxB,UAAW4D,EAAQX,iBACtB,kBAACiC,EAAA,EAAD,CACEC,MAAM,iBACNC,QAAQ,WACRC,SAzES,SAACC,GACpBrB,EAAUqB,EAAMC,OAAOC,MAAMC,mBA2EvB,yBAAKzF,UAAW4D,EAAQJ,iBACtB,kBAACnC,EAAA,EAAD,CAAMC,GAAIzB,EAAW8B,QAAS,kBAAM5B,EAAQ6B,KAAK,+BAA8B,kBAAC8D,EAAA,EAAD,CAAY1F,UAAU,cAAtB,YAC/E,kBAAC0F,EAAA,EAAD,CAAYzF,MAAO,CAAE0F,WAAY,QAAjC,kBAIL7B,EAGC,kBAACxD,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGR,UAAW4D,EAAQtB,kBAC5CsD,OAAOC,KAAK/B,GAAa1D,KACxB,SAAC0F,GAAD,OACEhC,EAAYgC,GAAW/D,KAAKgE,SAAS/B,IA1C1B,SAAC8B,GAAe,IAAD,EACPhC,EAAYgC,GAAjCjB,EAD4B,EAC5BA,GAAI9C,EADwB,EACxBA,KAAM+C,EADkB,EAClBA,OAElB,OACE,kBAACxE,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIsF,GAAI,EAAGC,IAAKH,GAC7B,kBAAClF,EAAA,EAAD,CAAMZ,UAAU,cAAc2B,QAAS,kBAAM5B,EAAQ6B,KAAR,mCAAyCiD,MACpF,kBAAC5D,EAAA,EAAD,CACEjB,UAAW4D,EAAQhB,UACnBzB,MAAQ2D,EACR7E,MAAO,CAAE0C,MAAO,QAASuD,OAAQ,WAEnC,kBAACnF,EAAA,EAAD,CAAaf,UAAW4D,EAAQf,aAC9B,kBAAC6C,EAAA,EAAD,eAAgBb,EAAhB,aAAuB/C,EAAqBC,KAAsB,OA+BhEoE,CAAeL,OAKrB,kBAACM,EAAA,EAAD,CAAkBnG,MAAO,CAACoG,WAAY,c,SClI/BC,EArBI,CACfC,IAAK,UACLC,OAAQ,UACRC,MAAO,UACPC,KAAM,UACNC,MAAO,UACPC,OAAQ,UACRC,OAAQ,UACRC,QAAS,UACTC,MAAO,SACPC,KAAM,UACNC,SAAU,UACVC,SAAU,UACVC,OAAQ,UACRC,MAAO,UACPC,IAAK,UACLC,OAAQ,UACRC,KAAM,UACNC,MAAO,WCiHIC,EAtHC,SAAC3H,GAAW,IAClB4H,EAAmB5H,EAAnB4H,MAAO3H,EAAYD,EAAZC,QAEP+F,EADW4B,EAAXC,OACA7B,UAHiB,EAIKjC,wBAAS+D,GAJd,mBAIlBjD,EAJkB,KAITkD,EAJS,KAMzB3D,qBAAU,WACRC,IACGC,IADH,4CAC4C0B,IACzCzB,MAAK,SAAUC,GAAW,IACjBE,EAASF,EAATE,KACRd,QAAQC,IAAI,QAASa,GACrBqD,EAAWrD,MAEZsD,OAAM,SAAUC,GACfrE,QAAQC,IAAI,QAASoE,GACrBF,GAAW,QAEd,CAAC/B,IAiEJ,OACE,yCAGe8B,IAAZjD,GACC,kBAACyB,EAAA,EAAD,CAAkBnG,MAAO,CAAE+H,aAAc,iBAI9BJ,IAAZjD,GAAyBA,GAxEN,SAACA,GAAa,IAElC5C,EAQE4C,EARF5C,KACA8C,EAOEF,EAPFE,GACAoD,EAMEtD,EANFsD,QACA/B,EAKEvB,EALFuB,OACAgC,EAIEvD,EAJFuD,OACAC,EAGExD,EAHFwD,MACAC,EAEEzD,EAFFyD,QACAC,EACE1D,EADF0D,yBAEMC,EAAkBF,EAAlBE,cACAC,EAAgBH,EAAhBG,YAER,OACE,oCACE,kBAAC7C,EAAA,EAAD,CAAYN,QAAQ,KAAKpF,UAAU,aAAaC,MAAO,CAACY,aAAc,SAAtE,UACMgE,EADN,SACc/C,EAAqBC,IAEnC,yBAAK/B,UAAU,eAAeC,MAAO,CAACY,aAAc,MAAO8B,MAAO,QAChE,yBAAK1C,MAAO,CAAE0C,MAAO,SAAUuD,OAAQ,UAAYhF,IAAKoH,EAAelH,IAAI,mBAC3E,yBAAKnB,MAAO,CAAE0C,MAAO,SAAUuD,OAAQ,UAAYhF,IAAKqH,EAAanH,IAAI,kBAE3E,yBAAKpB,UAAU,iBAAiBC,MAAO,CAACY,aAAc,MAAO8B,MAAO,QAClE,kBAAC+C,EAAA,EAAD,CAAYN,QAAQ,KAAKnF,MAAO,CAACwB,eAAgB,cAAjD,gBACA,kBAACiE,EAAA,EAAD,CAAY1F,UAAU,cACnB,YACD,kBAACqB,EAAA,EAAD,CAAMmH,KAAMP,EAAQQ,KACjB3G,EAAqBmG,EAAQlG,MAAO,MAGzC,kBAAC2D,EAAA,EAAD,gBAAqBQ,EAArB,KACA,kBAACR,EAAA,EAAD,gBAAqBwC,EAArB,KACA,kBAACxC,EAAA,EAAD,CAAYN,QAAQ,MAApB,WACC+C,EAAM/H,KAAI,SAACsI,GAAc,IAChBC,EAASD,EAATC,KACA5G,EAAS4G,EAAT5G,KAER,OADA2B,QAAQC,IAAI,WAAYgF,GAEtB,kBAACrI,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGP,MAAO,CAAC+C,eAAgB,SAAUN,UAAW,OAAQ7B,aAAc,SAC7F,kBAACP,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGX,UAAU,qBACnC,kBAACqB,EAAA,EAAD,CACEmH,KAAMG,EAAKF,IACXxC,IAAKlE,EACL/B,UAAU,WACVC,MAAO,CACLiD,gBAAiBoD,EAAWqC,EAAK5G,MACjCP,MAAO,QACPmB,MAAO,QAGRb,EAAqB,GAAD,OAAIC,UAOjC,kBAACV,EAAA,EAAD,CAAMmH,KAAMH,GAA0B,gDAcLO,CAAgBjE,IAGxC,IAAZA,GAAqB,kBAACe,EAAA,EAAD,gCAGTkC,IAAZjD,GACC,kBAACrE,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAI,GAAID,GAAI,GACrB,kBAACmI,EAAA,EAAD,CACE5I,MAAO,CACLiD,gBAAiB,UACjB1B,MAAO,UACPsH,MAAO,SAGTnH,QAAS,kBAAM5B,EAAQ6B,KAAK,uBAP9B,uBCpGNO,EAAYC,aAAW,iBAAO,CAClCE,iBAAkB,CAChBI,UAAW,OAEbE,UAAW,CACTlB,OAAQ,QAEVmB,YAAa,CACX3C,UAAW,cAuGA6I,EAnGI,SAACjJ,GAClB,IAAM8D,EAAUzB,IADY,EAEU0B,qBAFV,mBAErBC,EAFqB,KAERC,EAFQ,OAGQF,qBAHR,mBAGrBmF,EAHqB,KAGTC,EAHS,KAIpBvB,EAAmB5H,EAAnB4H,MAAO3H,EAAYD,EAAZC,QAEPmJ,EADWxB,EAAXC,OACAuB,SAERhF,qBAAU,WACRC,IACGC,IADH,+CAC+C8E,EAD/C,MAEG7E,MAAK,SAAUC,GAAW,IACjBE,EAASF,EAATE,KACJ2E,EAAiB7E,EAASE,KAAK4E,gBAEnCD,EAAezE,SAAQ,SAAC2E,GACtBA,EAAQZ,IAAMY,EAAQZ,IAAIvG,MAAM,GAAI,GACpCmH,EAAQxE,GAAKyE,SACXD,EAAQZ,IAAIc,UAAUF,EAAQZ,IAAIe,YAAY,KAAO,IAEvDH,EAAQvE,OAAR,mFACEuE,EAAQxE,GADV,WAKFsE,EAAeM,MAAK,SAACC,EAAGC,GACtB,OAAOD,EAAE7E,GAAK8E,EAAE9E,GAAK,GAAK,KAE5BnB,QAAQC,IAAI,OAAQa,GACpBT,EAAeoF,GACfzF,QAAQC,IAAI,mBAAoBwF,GAChCF,EAAczE,MAEfsD,OAAM,SAAUC,GACfkB,GAAc,QAEjB,CAACC,IA8CJ,OACE,kCAGkBtB,IAAfoB,GACC,kBAAC5C,EAAA,EAAD,CAAkBnG,MAAO,CAAEoG,WAAY,iBAIzBuB,IAAfoB,GAA4BA,GArDX,SAACE,GAAc,IAC3BU,EAAgBV,EAAhBU,YACqB9F,EAArBe,GAAqBf,EAAjB/B,KAAiB+B,EAAXgB,OAGlB,OAFApB,QAAQC,IAAI,cAAeG,GAGzB,6BACE,wBAAI9D,UAAU,gBAAgBC,MAAO,CAAEC,UAAW,WAAlD,UACM4B,EAAqB8H,EAAY7H,OADvC,cAGA,yBAAK/B,UAAU,wBACZ8D,EAAY1D,KAAI,SAACuE,GAAD,OACf,kBAACrE,EAAA,EAAD,CACEC,WAAS,EACTC,QAAS,EACTR,UAAW4D,EAAQtB,iBACnB2D,IAAKtB,EAAQ5C,MAEb,kBAACzB,EAAA,EAAD,CAAMN,UAAU,sBACd,kBAACY,EAAA,EAAD,CACEZ,UAAU,qBACV2B,QAAS,kBACP5B,EAAQ6B,KAAR,mCAAyC+C,EAAQE,OAGnD,kBAAC5D,EAAA,EAAD,CACEjB,UAAW4D,EAAQhB,UACnBzB,MAAOwD,EAAQG,OACf7E,MAAO,CAAE0C,MAAO,QAASuD,OAAQ,WAEnC,kBAACnF,EAAA,EAAD,CAAaf,UAAW4D,EAAQf,aAChC,kBAAC6C,EAAA,EAAD,eAAgBf,EAAQE,GAAxB,aAA+B/C,EAC7B6C,EAAQ5C,QACQ,aAoBa8H,CAAcb,IAGzC,IAAfA,GAAwB,kBAACtD,EAAA,EAAD,4B,SCnGhBoE,EAbH,SAAChK,GACSA,EAAZC,QAER,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOgK,OAAK,EAACC,KAAK,oBAAoBC,UAAWxG,IACjD,kBAAC,IAAD,CAAOsG,OAAK,EAACC,KAAK,2BAA2BE,OAAQ,SAACpK,GAAD,OAAW,kBAAC,EAAcA,MAC/E,kBAAC,IAAD,CAAOiK,OAAK,EAACC,KAAK,qCAAqCE,OAAQ,SAACpK,GAAD,OAAW,kBAACqK,EAAerK,MAC1F,kBAAC,IAAD,CAAOiK,OAAK,EAACC,KAAK,sCAAsCE,OAAQ,SAACpK,GAAD,OAAW,kBAAC,EAAYA,QCJ1EsK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS7C,MACvB,2D,YCXA3H,EAAUyK,cAEhBC,IAASP,OACP,kBAAC,IAAMQ,WAAP,KACE,kBAAC,IAAD,CAAQ3K,QAASA,GACf,kBAAC,EAAD,CAAKA,QAASA,MAGlB4K,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1G,MAAK,SAAA2G,GACJA,EAAaC,gBAEdnD,OAAM,SAAAC,GACLrE,QAAQqE,MAAMA,EAAMmD,c","file":"static/js/main.7fd03184.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Card,\n  CardMedia,\n  CardContent,\n  Grid,\n  Link\n} from \"@material-ui/core\";\nimport regionJSON from '../utils/region.json';\nimport './styles.css';\n\nconst RegionDex = (props) => {\n  const { history } = props;\n\n  return (\n    <div className='region-container'>\n      <h1 style={{textAlign: 'center'}}>All Regions</h1>\n      {regionJSON.map((region) => {\n        return (\n        <Grid container spacing={3} className='grid-container'>\n          <Grid item xs={8} lg={8} className='grid-item grid-item-center' >\n            <Card style={{marginBottom: '1em', border: '2px solid #FF4236' }}>\n              <CardContent>\n                <h2 style={{textAlign: 'center'}}>{region.region_name}</h2>\n              </CardContent>\n              <CardMedia className='card-media' >\n                <img className='region-image' src={region.image} alt={region.region_name}></img>\n                <Link to={region.link} className='region-button' style={{color: 'white', textDecoration: 'none', margin: '0 1em 1em 0' }} onClick={() => history.push(`/pokedex-testing/regions/${region.region_ID}`)}>Pokemon from this Region</Link>\n              </CardMedia>\n            </Card>\n          </Grid>\n        </Grid>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default RegionDex;\n","export const toFirstCharUppercase = name =>\n    name.charAt(0).toUpperCase() + name.slice(1);","import React, { useState, useEffect } from \"react\";\nimport RegionDex from './RegionDex';\nimport axios from \"axios\";\nimport {\n  AppBar,\n  Toolbar,\n  Grid,\n  Card,\n  CardContent,\n  CardMedia,\n  CircularProgress,\n  Typography,\n  Link,\n  TextField\n} from \"@material-ui/core\";\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\nimport { toFirstCharUppercase } from \"../utils/firstChar\";\nimport './styles.css';\n\nconst useStyles = makeStyles((theme) => ({\n  pokedexContainer: {\n    paddingTop: \"20px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n    marginTop: '1em',\n    width: '100%'\n  },\n  cardMedia: {\n    margin: \"auto\",\n  },\n  cardContent: {\n    textAlign: \"center\",\n  },\n  pokemonHeader: {\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  searchContainer: {\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    padding: \".5em 1em .5em 1em\",\n    margin: \"5px 0px\",\n  },\n  rightSideHeader: {\n    display: 'flex'\n  }\n}));\n\nconst Pokedex = (props) => {\n  console.log('props', props)\n  const classes = useStyles();\n  const { history } = props;\n  const [pokemonData, setPokemonData] = useState({});\n  // const [loading, setLoading] = useState(true);\n  // const [nextUrl, setNextUrl] = useState('');\n  // const [prevUrl, setPrevUrl] = useState('');\n  const [filter, setFilter] = useState('');\n\n  const handleChange = (event) => {\n    setFilter(event.target.value.toLowerCase());\n  };\n\n  // const next = async () => {\n  //   setLoading(true);\n  //   let data = await getAllPokemon(nextUrl);\n  //   await loadPokemon(data.results);\n  //   setNextUrl(data.next);\n  //   setPrevUrl(data.previous);\n  //   setLoading(false);\n  // }\n\n  // const prev = async () => {\n  //   if (!prevUrl) return;\n  //   setLoading(true);\n  //   let data = await getAllPokemon(prevUrl);\n  //   await loadPokemon(data.results);\n  //   setNextUrl(data.next);\n  //   setPrevUrl(data.previous);\n  //   setLoading(false);\n  // }\n\n  // Used axios to get the pokemon from the API\n  useEffect(() => {\n    axios\n      .get(`https://pokeapi.co/api/v2/pokemon?limit=893?offset=21`)\n      .then(function (response) {\n        const { data } = response;\n        const { results } = data;\n        const newPokemonData = {};\n        // will push the information from the results object into newPokemonData with each id, name, and sprite for all.\n        results.forEach((pokemon, index) => {\n          newPokemonData[index + 1] = {\n            id: index + 1,\n            name: pokemon.name,\n            sprite: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${\n              index + 1\n            }.png`,\n          };\n        });\n        setPokemonData(newPokemonData);\n      });\n  }, []);\n\n  // renders a card for each pokemon with their given ID, name, and sprite. When clicked, the pokemon's page will show up\n  const getPokemonCard = (pokemonId) => {\n    const { id, name, sprite } = pokemonData[pokemonId];\n\n    return (\n      <Grid item xs={12} sm={4} key={pokemonId}>\n        <Card className='pokemonCard' onClick={() => history.push(`/pokedex-testing/pokemon/${id}`)}>\n          <CardMedia\n            className={classes.cardMedia}\n            image={(sprite)}\n            style={{ width: \"130px\", height: \"130px\" }}\n          />\n          <CardContent className={classes.cardContent}>\n            <Typography>{`${id}. ${toFirstCharUppercase(name)}`}</Typography>{\" \"}\n          </CardContent>\n        </Card>\n      </Grid>\n    );\n  };\n\n  return (\n    <>\n      <AppBar position=\"static\">\n        <Toolbar className='pokemonHeader' style={{ backgroundColor: \"#FF4236\", color: '#dcdcdc'}}>\n          <div className={classes.searchContainer}>\n            <TextField\n              label=\"Search Pokemon\"\n              variant=\"standard\"\n              onChange={handleChange}\n            />\n          </div>\n          <div className={classes.rightSideHeader}>\n            <Link to={RegionDex} onClick={() => history.push('/pokedex-testing/regions/')}><Typography className='regionLink'>Regions</Typography></Link>\n            <Typography style={{ marginLeft: '1em' }}>Pokemon App</Typography>\n          </div>\n        </Toolbar>\n      </AppBar>\n      {pokemonData ? (\n      // If pokemonData exists, the Grid container will render along with all pokemon cards that are filtered in through the search bar if anything is there.\n      // If there is nothing in the search bar, it will show every pokemon in the API. \n        <Grid container spacing={2} className={classes.pokedexContainer}>\n          {Object.keys(pokemonData).map(\n            (pokemonId) =>\n              pokemonData[pokemonId].name.includes(filter) &&\n              getPokemonCard(pokemonId)\n          )}\n        </Grid>\n      ) : (\n        // if pokemonData doesn't exist yet, a loading circle will show in the page.\n        <CircularProgress style={{placeItems: 'center'}}/>\n      )}\n    </>\n  );\n};\n\nexport default Pokedex;\n","const typeColors = {\n    bug: '#729f3f',\n    dragon: '#53a4cf',\n    fairy: '#fdb9e9',\n    fire: '#fd7d24',\n    ghost: '#7b62a3',\n    ground: '#f7de3f',\n    normal: '#a4acaf',\n    pyschic: '#f366b9',\n    steel: '#9eb7b',\n    dark: '#707070',\n    electric: '#eed535',\n    fighting: '#d56723',\n    flying: '#3dc7ef',\n    grass: '#9bcc50',\n    ice: '#51c4e7',\n    poison: '#b97fc9',\n    rock: '#a38c21',\n    water: '#4592c4'\n}\n\nexport default typeColors;","import React, { useEffect, useState } from \"react\";\nimport {\n  Typography,\n  Link,\n  CircularProgress,\n  Button,\n  Grid,\n} from \"@material-ui/core\";\nimport { toFirstCharUppercase } from \"../utils/firstChar\";\nimport typeColors from \"../utils/typeColors\";\nimport axios from \"axios\";\nimport \"./styles.css\";\n\nconst Pokemon = (props) => {\n  const { match, history } = props;\n  const { params } = match;\n  const { pokemonId } = params;\n  const [pokemon, setPokemon] = useState(undefined);\n\n  useEffect(() => {\n    axios\n      .get(`https://pokeapi.co/api/v2/pokemon/${pokemonId}`)\n      .then(function (response) {\n        const { data } = response;\n        console.log('hello', data);\n        setPokemon(data);\n      })\n      .catch(function (error) {\n        console.log(\"ERROR\", error);\n        setPokemon(false);\n      });\n  }, [pokemonId]);\n\n  const generatePokemon = (pokemon) => {\n    const {\n      name,\n      id,\n      species,\n      height,\n      weight,\n      types,\n      sprites,\n      location_area_encounters,\n    } = pokemon;\n    const { front_default } = sprites;\n    const { front_shiny } = sprites;\n\n    return (\n      <>\n        <Typography variant=\"h3\" className=\"pokeHeader\" style={{marginBottom: '.5em'}}>\n          {`${id}.`} {toFirstCharUppercase(name)}\n        </Typography>\n        <div className=\"pokemonImage\" style={{marginBottom: '1em', width: '50%'}}>\n          <img style={{ width: \"0 auto\", height: \"0 auto\" }} src={front_default} alt='default sprite'/>\n          <img style={{ width: \"0 auto\", height: \"0 auto\" }} src={front_shiny} alt='shiny sprite'/>\n        </div>\n        <div className=\"pokemonInfoDiv\" style={{marginBottom: '1em', width: '50%'}}>\n          <Typography variant=\"h5\" style={{textDecoration: 'underline'}}>Pokemon Info</Typography>\n          <Typography className=\"pokemonUrl\">\n            {\"Species: \"}\n            <Link href={species.url}>\n              {toFirstCharUppercase(species.name)}{\" \"}\n            </Link>\n          </Typography>\n          <Typography>Height: {height} </Typography>\n          <Typography>Weight: {weight} </Typography>\n          <Typography variant=\"h6\"> Types:</Typography>\n          {types.map((typeInfo) => {\n            const { type } = typeInfo;\n            const { name } = type;\n            console.log(\"NameType\", type);\n            return (\n              <Grid container spacing={3} style={{justifyContent: 'center', marginTop: '.1em', marginBottom: '.1em'}}>\n                <Grid item xs={8} lg={8} className='cardTypeContainer'>\n                <Link\n                  href={type.url}\n                  key={name}\n                  className=\"cardType\"\n                  style={{\n                    backgroundColor: typeColors[type.name],\n                    color: \"white\",\n                    width: \"25%\",\n                  }}\n                >\n                  {toFirstCharUppercase(`${name}`)}\n                </Link>\n                </Grid>\n              </Grid>\n\n            );\n          })}\n          <Link href={location_area_encounters}><strong>Locations</strong></Link>\n        </div>\n      </>\n    );\n  };\n  return (\n    <>\n      {/* 1. pokemon = undefined, that means we are getting the info\n        -> return loading progress */}\n      {pokemon === undefined && (\n        <CircularProgress style={{ alignContent: \"center\" }} />\n      )}\n      {/* 2. pokemon = good data, that means we've gotten info\n        -> return pokemon info */}\n      {pokemon !== undefined && pokemon && generatePokemon(pokemon)}\n      {/* 3. pokemon = bad data, that means no info has been found\n        -> return pokemon not found */}\n      {pokemon === false && <Typography> Pokemon not found</Typography>}\n\n      {/* 4. Show button for going back to home page. */}\n      {pokemon !== undefined && (\n        <Grid container>\n          <Grid item lg={10} xs={4}>\n            <Button\n              style={{\n                backgroundColor: \"#FF4236\",\n                color: \"#dcdcdc\",\n                float: 'right'\n              }}\n              // variant=\"contained\"\n              onClick={() => history.push(\"/pokedex-testing/\")}\n            >\n              Back to Pokedex\n            </Button>\n          </Grid>\n        </Grid>\n      )}\n    </>\n  );\n};\nexport default Pokemon;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Typography,\n  CircularProgress,\n  Card,\n  CardMedia,\n  CardContent,\n  Grid,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { toFirstCharUppercase } from \"../utils/firstChar\";\nimport axios from \"axios\";\nimport \"./styles.css\";\n\nconst useStyles = makeStyles(() => ({\n  pokedexContainer: {\n    marginTop: \"1em\",\n  },\n  cardMedia: {\n    margin: \"auto\",\n  },\n  cardContent: {\n    textAlign: \"center\",\n  },\n}));\n\nconst RegionPage = (props) => {\n  const classes = useStyles();\n  const [pokemonData, setPokemonData] = useState();\n  const [regionData, setRegionData] = useState();\n  const { match, history } = props;\n  const { params } = match;\n  const { regionId } = params;\n\n  useEffect(() => {\n    axios\n      .get(`https://pokeapi.co/api/v2/generation/${regionId}/`)\n      .then(function (response) {\n        const { data } = response;\n        let pokemonListRaw = response.data.pokemon_species;\n        // add id property to the pokémon for sorting purpose\n        pokemonListRaw.forEach((element) => {\n          element.url = element.url.slice(0, -1);\n          element.id = parseInt(\n            element.url.substring(element.url.lastIndexOf(\"/\") + 1)\n          );\n          element.sprite = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${\n            element.id\n          }.png`;\n        });\n        // order pokemon based on id\n        pokemonListRaw.sort((a, b) => {\n          return a.id > b.id ? 1 : -1;\n        });\n        console.log(\"data\", data);\n        setPokemonData(pokemonListRaw);\n        console.log(\"pokemon data new\", pokemonListRaw);\n        setRegionData(data);\n      })\n      .catch(function (error) {\n        setRegionData(false);\n      });\n  }, [regionId]);\n\n  const getRegionCard = (regionId) => {\n    const { main_region } = regionId;\n    const { id, name, sprite } = pokemonData;\n    console.log(\"pokemonData\", pokemonData);\n\n    return (\n      <div>\n        <h1 className='region-header' style={{ textAlign: \"center\" }}>\n          {`${toFirstCharUppercase(main_region.name)}`}'s Pokemon\n        </h1>\n        <div className=\"regionList-container\">\n          {pokemonData.map((pokemon) => (\n            <Grid\n              container\n              spacing={3}\n              className={classes.pokedexContainer}\n              key={pokemon.name}\n            >\n              <Grid className=\"pokemonList-region\">\n                <Card\n                  className='pokemonCard-region'\n                  onClick={() =>\n                    history.push(`/pokedex-testing/pokemon/${pokemon.id}`)\n                  }\n                >\n                  <CardMedia\n                    className={classes.cardMedia}\n                    image={pokemon.sprite}\n                    style={{ width: \"130px\", height: \"130px\" }}\n                  />\n                  <CardContent className={classes.cardContent}>\n                  <Typography>{`${pokemon.id}. ${toFirstCharUppercase(\n                    pokemon.name\n                  )}`}</Typography>{\" \"}\n                </CardContent>\n              </Card>\n            </Grid>\n          </Grid>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      {/* 1. regionData = undefined, that means we are getting the info\n        -> return loading progress */}\n      {regionData === undefined && (\n        <CircularProgress style={{ placeItems: \"center\" }} />\n      )}\n      {/* 2. regionData = good data, that means we've gotten info\n        -> return pokemon info */}\n      {regionData !== undefined && regionData && getRegionCard(regionData)}\n      {/* 3. region = bad data, that means no info has been found\n        -> return region not found */}\n      {regionData === false && <Typography> Region not found</Typography>}\n    </div>\n  );\n};\n\nexport default RegionPage;\n","import React from 'react';\nimport Pokedex from './pages/Pokedex';\nimport Pokemon from './pages/Pokemon';\nimport RegionPage from './pages/Region';\nimport RegionDex from './pages/RegionDex';\n// import Types from './pages/Types';\nimport { Route, Switch } from 'react-router-dom';\n\nconst App = (props) => {\n  const { history } = props;\n\n  return (\n    <Switch>\n      <Route exact path='/pokedex-testing/' component={Pokedex} />\n      <Route exact path='/pokedex-testing/regions' render={(props) => <RegionDex {...props} />} />\n      <Route exact path='/pokedex-testing/regions/:regionId' render={(props) => <RegionPage {...props} />} />\n      <Route exact path='/pokedex-testing/pokemon/:pokemonId' render={(props) => <Pokemon {...props}/>} />\n    </Switch>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router history={history}>\n      <App history={history} />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}